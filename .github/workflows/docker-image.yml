name: Tagged Release Docker Image
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
      ORG:
          description: 'the organization for tagging Docker images'
          required: true
          default: "samagragovernance"
      tag_latest:
            description: 'Tag the published images as latest'
            type: boolean
            required: false
            default: false
      ts_version:
        description: 'TS version to be used'
        required: false
        default: ""
env:
  ORG: ${{inputs.ORG}}
  TS_VERSION: ${{inputs.ts_version}}
  PRE_RELEASE: "true" # prevents the latest tag from being pushed.
jobs:
  build-images:
    name: Build Images
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        pg: [13, 14, 15, 16]
        type: ['alpine', 'bitnami']
        oss: [ "", "-oss" ]
        exclude:
          - type: 'bitnami'
            oss: '-oss'
          - pg: 16
            type: 'bitnami'
    steps:
      - uses: actions/checkout@v3
        with:
            ref: ${{inputs.version}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub Registry
        run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USER }} --password-stdin

      - name: Build and push Docker images
        run: |
          if [ "${{inputs.tag_latest}}" == "true" ]; then
            export PRE_RELEASE=''
          fi
          if [ "${{ matrix.type }}" == "alpine" ]; then
            make multi${{ matrix.oss }} ORG="$ORG" PG_VER="pg${{ matrix.pg }}" \
            ${TS_VERSION:+TS_VERSION="$TS_VERSION"} PREV_EXTRA="${{ matrix.oss }}" PRE_RELEASE="$PRE_RELEASE"
          else
            cd bitnami
            make push ORG="$ORG" PG_VER="pg${{ matrix.pg }}" ${TS_VERSION:+TS_VERSION="$TS_VERSION"} PRE_RELEASE="$PRE_RELEASE"
          fi
        env:
          DOCKER_BUILDKIT: 1
          BUILDKIT_INLINE_CACHE: 1
        working-directory: ${{ matrix.type == 'alpine' && '.' || 'bitnami' }}